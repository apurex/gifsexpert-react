{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","catch","err","console","error","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAmCeA,MAhCf,YAAyC,IAAlBC,EAAiB,EAAjBA,cAAiB,EAEAC,mBAAS,IAFT,mBAE7BC,EAF6B,KAEjBC,EAFiB,KAiBpC,OACG,sBAAMC,SAVY,SAACC,GAClBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,MAKnB,SACI,uBACKO,KAAK,OACLC,MAAOT,EACPU,SAlBc,SAACP,GACvBF,EAAeE,EAAEQ,OAAOF,a,+BCNnBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,0FAC6EC,UAAWH,IADxF,SAEAI,MAAOF,GAFP,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAaZM,GAbY,4CAAH,sDCULO,EAVK,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAE9B,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,4BAAKA,QCqBFO,EAxBC,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECAJ,SAAEA,GAAe,IAAD,EAEdd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAuBxC,OAhBAC,qBAAW,WAEPxB,EAASC,GACJwB,MAAK,SAAEC,GAEJH,EAAS,CACLf,KAAMkB,EACNL,SAAS,OAGdM,OAAM,SAACC,GACNC,QAAQC,MAAMF,QAGvB,CAAC3B,IAEGqB,EDrB0BS,CAAc9B,GAAlCa,EAFe,EAEpBN,KAAaa,EAFO,EAEPA,QAErB,OACI,qCACI,qBAAIJ,UAAU,oCAAd,cAAqDhB,EAArD,OAEEoB,GAAW,mBAAGJ,UAAU,mCAAb,wBAEb,qBAAKA,UAAU,YAAf,SAEQH,EAAOJ,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEKA,GADCA,EAAIC,aEQnBoB,MAtBf,WAAyB,IAAD,EAEgB7C,mBAAS,CAAC,cAF1B,mBAEb8C,EAFa,KAED/C,EAFC,KAIpB,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEQ+C,EAAWvB,KAAK,SAAAT,GAEZ,OAAO,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCZ7CiC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.c01d899b.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nfunction AddCategory({ setCategories }) {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        setInputValue( e.target.value );\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        \n        if ( inputValue.trim().length > 2 ) {\n            setCategories( cats => [inputValue, ...cats] );\n            setInputValue('');\n        }\n    };\n    \n    return (\n       <form onSubmit={handleSubmit}>\n           <input\n                type=\"text\"\n                value={inputValue}\n                onChange={handleInputChange}\n            ></input>\n       </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n\nexport default AddCategory\n","\n\nexport const getGifs = async (category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=pPHyCnNAeJHrQbTJ4hVXuYz0rbPo5nYa&q=${ encodeURI( category ) }`;\n    const resp = await fetch( url );\n    const { data } = await resp.json();\n\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    });\n    \n    return gifs;\n};","import React from 'react'\n\nconst GifGridItem = ({ id, title, url }) => {\n\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={ url } alt={ title }></img>\n            <p>{ title }</p>\n        </div>\n    )\n}\n\nexport default GifGridItem\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport GifGridItem from './GifGridItem';\n\nconst GifGrid = ({category}) => {\n    \n    const { data:images, loading } = useFetchGifs( category );\n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__fadeIn\"> { category } </h3>\n\n            { loading && <p className=\"animate__animated animate__flash\">Loading...</p> }\n\n            <div className=\"card-grid\">\n                {\n                    images.map(img => (\n                        <GifGridItem\n                        key={ img.id }\n                        { ...img }\n                        ></GifGridItem>\n                    ))\n                }\n            </div>\n        </>\n    )\n}\n\nexport default GifGrid\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from '../helpers/getGifs'\n\n\nexport const useFetchGifs = ( category ) => {\n    \n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect( () => {\n\n        getGifs( category )\n            .then(( imgs ) => {\n\n                setState({\n                    data: imgs,\n                    loading: false\n                });\n\n            }).catch((err) => {\n                console.error(err);\n            });;\n\n    }, [category] );\n\n    return state;\n    \n}\n","import React, { useState } from 'react'\nimport AddCategory from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n\nfunction GifExpertApp() {\n    \n    const [categories, setCategories] = useState(['One Punch']);\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={ setCategories }></AddCategory>\n            <hr></hr>\n\n            <ol>\n                { \n                    categories.map( category => {\n                        // return <li key={category}>{category}</li>\n                        return <GifGrid key={category} category={category}></GifGrid>\n                    } )\n                }\n            </ol>\n        </>\n    )\n}\n\nexport default GifExpertApp\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}